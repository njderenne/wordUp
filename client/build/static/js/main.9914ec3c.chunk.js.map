{"version":3,"sources":["utils/queries.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","utils/mutations.js","utils/helpers.js","Components/AddChat/index.js","Components/SearchFriend/index.js","utils/auth.js","utils/subscriptions.js","Components/DeleteChat/index.js","Components/Sidebar/index.js","Components/AddParticipant/index.js","Components/ChatParticipants/index.js","Components/Conversation/index.js","Components/Menu/index.js","utils/useWindowSize.js","pages/Dashboard.js","pages/Login.js","pages/Signup.js","App.js","serviceWorker.js","index.js"],"names":["QUERY_USER","gql","QUERY_USERS","QUERY_CHANNEL","UPDATE_CHANNEL","GET_FRIENDS","GET_USER","TOGGLE_FRIENDS","TOGGLE_CHAT","TOGGLE_NEWCHAT","TOGGLE_NEWFRIEND","UPDATE_MESSAGES","GET_USERS","TOGGLE_PARTICIPANTS","GET_PARTICIPANTS","reducer","state","action","type","channels","messages","friends","firstName","lastName","friendsListOpen","currentChat","newChatOpen","newFriendOpen","users","participantsListOpen","participants","StoreContext","createContext","Provider","ChannelProvider","value","initialState","props","loggedUser","useReducer","dispatch","useStoreContext","useContext","LOGIN","ADD_USER","ADD_MESSAGE","ADD_CHANNEL","ADD_FRIEND","ADD_PARTICIPANT","DELETE_CHANNEL","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","AddChat","useMutation","addChannel","useQuery","queryData","loading","data","handleNewChannel","event","a","preventDefault","chatName","document","querySelector","variables","name","newChat","forEach","channel","toggleNewChat","location","reload","error","user","mobileWidth","innerWidth","className","onClick","id","aria-hidden","role","aria-modal","aria-labelledby","AddFriend","addFriend","useState","errorMessage","setErrorMessage","toggleNewFriend","useEffect","then","handleNewFriend","friend","i","length","email","addFriendId","friendId","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","assign","removeItem","MESSAGE_SUBSCRIPTION","CHANNEL_SUBSCRIPTION","DeleteChat","deleteChannel","handleDeleteChannel","removeChannel","channelToRemove","channelId","Sidebar","userData","Auth","getProfile","useSubscription","userId","selectChat","channelAdded","map","href","logout","AddParticipant","addParticipant","tempFriendArray","handleAddSubmit","toggleFriendsList","tempHighlight","getElementById","classList","add","push","clickHandler","ChatParticipants","toggleParticipantsList","participant","Conversation","messageField","setMessage","addMessage","convoState","setConvoState","messagesEndRef","useRef","message","messageAdded","current","scrollIntoView","behavior","scrollToBottom","handleMessageSubmit","createdBy","messageText","handleChange","target","ref","sender","onChange","Menu","dropdownPopoverShow","setDropdownPopoverShow","btnDropdownRef","createRef","popoverDropdownRef","style","transition","Popper","placement","minWidth","useWindowSize","width","undefined","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","Dashboard","Login","password","formState","setFormState","login","handleFormSubmit","loginResponse","onSubmit","placeholder","to","Signup","rePassword","addUser","validateEmail","mutationResponse","RegExp","test","String","toLowerCase","onBlur","httpLink","HttpLink","uri","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","cache","InMemoryCache","typePolicies","User","fields","merge","existing","incoming","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","origin","fetch","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9914ec3c.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const QUERY_USER = gql`\n    query GetUser{\n        user {\n            _id\n            firstName\n            lastName\n            email\n            friends{\n                _id\n                firstName\n                lastName\n            }\n            channels{\n                _id\n                name\n                participants{\n                    _id\n                    firstName\n                    lastName\n                }\n                messages{\n                    _id\n                    messageText\n                    createdAt\n                    email\n                }\n            }\n        }\n    }\n`;\n\nexport const QUERY_USERS = gql`\n    query{\n        users{\n            firstName\n            lastName\n            _id\n            email\n            friends{\n                _id\n                firstName\n                lastName\n                email\n            }\n        }   \n    }\n`;\n\nexport const QUERY_CHANNELS = gql`\n    query GetChannels{\n        channels {\n            _id\n            name\n            participants{\n                _id \n                firstName\n                lastName\n            }\n            messages{\n                _id\n                messageText\n                createdAt\n                email\n            }\n            \n        }\n    }            \n`;\n\nexport const QUERY_CHANNEL = gql`\n    query GetChannel ($channelId: ID!) {\n        channel(channelId: $channelId) {\n            _id\n            name\n            participants{\n                _id \n                firstName\n                lastName\n            }\n            messages{\n                _id\n                messageText\n                createdAt\n                email\n                sender\n                \n            }\n            \n        }\n    }            \n`;\n","// export const SELECT_CHANNEL = \"SELECT_CHANNEL\";\nexport const UPDATE_CHANNEL = \"UPDATE_CHANNEL\";\nexport const GET_FRIENDS = \"GET_FRIENDS\";\nexport const GET_USER = \"GET_USER\";\nexport const TOGGLE_FRIENDS = \"TOGGLE_FRIENDS\";\nexport const TOGGLE_CHAT = \"TOGGLE_CHAT\";\nexport const TOGGLE_NEWCHAT = \"TOGGLE_NEWCHAT\";\nexport const TOGGLE_NEWFRIEND = \"TOGGLE_NEWFRIEND\";\nexport const UPDATE_MESSAGES = 'UPDATE_MESSAGES';\nexport const GET_USERS = \"GET_USERS\";\nexport const TOGGLE_PARTICIPANTS = 'TOGGLE_PARTICIPANTS';\nexport const GET_PARTICIPANTS = 'GET_PARTICIPANTS';","import { useReducer } from 'react';\nimport {\n    UPDATE_CHANNEL,\n    GET_FRIENDS,\n    GET_USER,\n    TOGGLE_FRIENDS,\n    TOGGLE_CHAT,\n    UPDATE_MESSAGES,\n    TOGGLE_NEWCHAT,\n    GET_USERS,\n    TOGGLE_NEWFRIEND,\n    TOGGLE_PARTICIPANTS,\n    GET_PARTICIPANTS\n} from './actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case UPDATE_CHANNEL:\n            return {\n                ...state,\n                channels: [...action.channels]\n            }\n        case UPDATE_MESSAGES:\n            return {\n                ...state,\n                messages: [...action.messages]\n            }\n        case GET_FRIENDS:\n            return {\n                ...state,\n                friends: [...action.friends]\n            }\n        case GET_USER:\n            return {\n                ...state,\n                firstName: action.firstName, \n                lastName: action.lastName\n            }\n        case TOGGLE_FRIENDS:\n            return {\n                ...state,\n                friendsListOpen: !state.friendsListOpen\n            }\n        case TOGGLE_CHAT:\n            return {\n                ...state,\n                currentChat:  action.currentChat\n            }\n        case TOGGLE_NEWCHAT:\n            return {\n                ...state,\n                newChatOpen: !state.newChatOpen\n            }\n        case TOGGLE_NEWFRIEND:\n            return {\n                ...state,\n                newFriendOpen: !state.newFriendOpen\n            }\n        case GET_USERS:\n            return {\n                ...state,\n                users: [...action.users]\n            }\n        case TOGGLE_PARTICIPANTS:\n            return {\n                ...state,\n                participantsListOpen: !state.participantsListOpen\n            }\n        case GET_PARTICIPANTS:\n            return {\n                ...state,\n                participants: [...action.participants]\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport function useChatReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","import React, { createContext, useContext } from 'react';\nimport { useChatReducer } from './reducers';\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n\nconst ChannelProvider = ({ value = [], ...props}) => {\n    const [state, dispatch] = useChatReducer({\n        channels: [],\n        messages: [],\n        friends: [],\n        participants: [],\n        users: [],\n        loggedUser: '',\n        currentChat: '',\n        firstName: '',\n        lastName: '',\n        friendsListOpen: false,\n        newChatOpen: false,\n        newFriendOpen: false,\n        participantsListOpen: false\n        })\n    return <Provider value={[state, dispatch]} {...props} />;\n    \n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { ChannelProvider, useStoreContext };\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user{\n                _id\n            }\n        }\n    }\n    `;\n\nexport const ADD_USER = gql`\n    mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n        addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n            token\n            user{\n                _id\n            }\n        }\n    }\n    `;\n\nexport const ADD_MESSAGE = gql`\n    mutation addMessage($channelId: ID!, $messageText: String!) {\n        addMessage(channelId: $channelId, messageText: $messageText) {\n            _id\n            name\n            createdBy\n            createdAt\n            participants {\n                _id\n            }\n            messages {\n            messageText\n            }\n        }\n    }\n    `;\n\nexport const ADD_CHANNEL = gql` \n    mutation addChannel($name: String!) {\n        addChannel(name:$name) {\n        _id\n        name\n        createdBy\n        participants {\n            _id\n        }\n        }\n    }\n    `;\n\nexport const ADD_FRIEND = gql` \n    mutation addFriend($friendId: ID!) {\n        addFriend(friendId: $friendId) {\n            _id\n            firstName\n        }\n    }\n    `;\n\nexport const ADD_PARTICIPANT = gql` \n    mutation addParticipant($channelId: ID!, $participants: ID!) {\n        addParticipant(channelId: $channelId, participants: $participants) {\n            _id\n            name\n            createdBy\n            participants {\n                _id\n            }\n        }\n    }\n    `;\n\nexport const DELETE_CHANNEL = gql`\n    mutation removeChannel($channelId: ID!) {\n        removeChannel(channelId:$channelId) {\n            _id\n            name\n            createdBy\n            participants {\n                _id\n            }\n        }\n    }\n`;","export function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('wordUp', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      db.createObjectStore('channels', { keyPath: '_id' });\n      db.createObjectStore('friends', { keyPath: '_id'});\n      db.createObjectStore('messages', { keyPath: '_id'});\n      db.createObjectStore('users', { keyPath: '_id'});\n      db.createObjectStore('participants', {keyPath: '_id'});\n    };\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function (e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","import React from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_CHANNEL } from '../../utils/mutations';\nimport { TOGGLE_NEWCHAT, UPDATE_CHANNEL } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_USER } from '../../utils/queries';\n\n\nfunction AddChat() {\n    const [state, dispatch] = useStoreContext();\n    const [addChannel] = useMutation(ADD_CHANNEL);\n    const { loading, data: queryData } = useQuery(QUERY_USER);\n\n    const handleNewChannel = async event => {\n        event.preventDefault();\n        const chatName = document.querySelector('#chatName').value;\n\n        try {\n            const { data } = await addChannel({\n                variables: {\n                    name: chatName\n                }\n            });\n\n            const newChat = data.addChannel._id;\n\n            state.channels.forEach((channel) => {\n                if(channel._id === newChat) {\n                    idbPromise('channels', 'put', { ...channel });\n                }\n            })\n\n            toggleNewChat();\n            window.location.reload();\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    function toggleNewChat() {\n        dispatch({ type: TOGGLE_NEWCHAT });\n        dispatch({\n            type: UPDATE_CHANNEL,\n            channels: queryData.user.channels\n        });\n        queryData.user.channels.forEach((channel) => {\n            idbPromise('channels', 'put', channel);\n        });\n    }\n\n    let width = window.innerWidth;\n    let mobileWidth = width <= 845;\n    if(mobileWidth && !state.newChatOpen) {\n        return (\n            <div className=\"\">\n                <button onClick={toggleNewChat} className=\"w-10/12 mx-auto my-3 flex items-center justify-center px-8 border border-transparent text-base font-medium rounded-md bg-blue hover:bg-purple md:py-4 md:text-lg md:px-10\">\n                    + New Conversation\n                </button>\n            </div>\n        )\n    }\n\n    if (!state.newChatOpen && !mobileWidth) {\n        return (\n            <div className=\"\">\n                <button onClick={toggleNewChat} className=\"w-10/12 mx-auto my-3 flex items-center justify-center px-8 border border-transparent text-base font-medium rounded-md bg-blue hover:bg-purple md:py-4 md:text-lg md:px-10\">\n                    + New Conversation\n                </button>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"\">\n            {!mobileWidth ? \n                <div className=\"fixed z-10 inset-0 overflow-y-auto\">\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n    \n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n                        <div className=\"absolute inset-0 bg-gray opacity-75\"></div>\n                    </div>\n    \n    \n                    <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n    \n                    <div className=\"inline-block align-bottom border-4 bg-purple bg-transparent rounded-lg text-left overflow-hidden  shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\n                        <div className=\"container mx-auto px-4 pt-5 pb-4 align-center sm:p-6 sm:pb-4\">\n                            <div className=\"justify-center items-center sm:flex sm:items-start\">\n                                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                                    <h3 className=\"container mx-auto text-lg leading-6 font-bold\" id=\"modal-headline\">\n                                        Give your chat a name!\n                                        </h3>\n                                    <div className=\"mt-2\">\n                                        <input id=\"chatName\" className=\"container mx-auto my-2 border-2 \"></input>\n                                    </div>\n                                    <button onClick={handleNewChannel} className=\"container mx-auto shadow-sm mt-1 block sm:text-sm border-2 rounded-md bg-blue hover:bg-purple-dark hover:text-gray-lightest hover:border-gray-lightest\"> Add Chat </button>\n                                    <button onClick={toggleNewChat} className=\"container mx-auto shadow-sm  mt-1 block sm:text-sm border-2 rounded-md bg-gray-light hover:bg-gray-lightest\">Close</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        :\n            <div className='w-11/12 items-center mx-auto'>\n                <h3 className=\"container mx-auto text-center font-bold text-lg leading-6 font-bold\" id=\"modal-headline\">\n                    Give your chat a name!\n                </h3>\n                <div className=\"mt-2\">\n                    <input id=\"chatName\" className=\"container mx-auto my-2 border-2 \"></input>\n                </div>\n                <button onClick={handleNewChannel} className=\"bg-purple container mx-auto shadow-sm mt-1 block sm:text-sm border-2  hover:bg-blue font-bold rounded-md\"> Add Chat </button>\n                <button onClick={toggleNewChat} className=\"bg-purple container mx-auto shadow-sm mt-1 block sm:text-sm border-2  font-bold hover:bg-blue rounded-md\">Close</button>\n                <div className='pt-4 border-b-4'></div>\n            </div>\n        }\n        </div>\n    )\n}\n\n\nexport default AddChat","import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { QUERY_USERS } from '../../utils/queries';\nimport { ADD_FRIEND } from '../../utils/mutations';\nimport { idbPromise } from '../../utils/helpers';\nimport { GET_USERS, TOGGLE_NEWFRIEND } from '../../utils/actions';\n\nfunction AddFriend() {\n    const [state, dispatch] = useStoreContext();\n    const [addFriend] = useMutation(ADD_FRIEND);\n    const { loading, data } = useQuery(QUERY_USERS);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: GET_USERS,\n                users: data.users\n            });\n            data.users.forEach((users) => {\n                idbPromise('users', 'put', users);\n            });\n        } else if (!loading) {\n            idbPromise('users', 'get').then((users) => {\n                dispatch({\n                    type: GET_USERS,\n                    users: users\n                });\n            });\n        }\n    }, [data, loading, dispatch]);\n\n\n    function toggleNewFriend() {\n        dispatch({ type: TOGGLE_NEWFRIEND });\n    };\n\n    const handleNewFriend = async event => {\n        event.preventDefault();\n        const friend = document.querySelector('#searchBar').value;\n        for (let i = 0; i < state.users.length; i++) {\n            if (friend === state.users[i].email) {\n                let addFriendId = state.users[i]._id\n                try {\n                await addFriend({\n                variables: {\n                    friendId: addFriendId\n                }\n                    });\n                    toggleNewFriend();\n                    window.location.reload();\n                } catch (e) {\n                    setErrorMessage(\"No user found with that email\");\n                }\n            } else {\n                setErrorMessage(\"No user found with that email!\");               \n            }\n        }\n    };\n\n    let width = window.innerWidth;\n    let mobileWidth = width <= 845;\n\n    if(mobileWidth && !state.newFriendOpen) {\n        return (\n            <div className=\"\">\n                <button onClick={toggleNewFriend} className=\"w-10/12 mx-auto my-3 flex items-center justify-center px-8 border border-transparent text-base font-medium rounded-md bg-blue hover:bg-purple md:py-4 md:text-lg md:px-10\">+ Add Friend</button>\n            </div>\n        )\n    }\n\n\n    if (!state.newFriendOpen && !mobileWidth) {\n        return (\n            <div className=\"\">\n                <button onClick={toggleNewFriend} className=\"w-10/12 mx-auto my-3 flex items-center justify-center px-8 border border-transparent text-base font-medium rounded-md bg-blue hover:bg-purple md:py-4 md:text-lg md:px-10\">+ Add Friend</button>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {!mobileWidth ?\n                <div className=\"fixed z-10 inset-0 overflow-y-auto\">\n                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n\n                        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n                            <div className=\"absolute inset-0 opacity-75\"></div>\n                        </div>\n\n\n                        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n                        <div className=\"inline-block align-bottom border-4 bg-purple bg-transparent rounded-lg text-left overflow-hidden  shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\n                            <div className=\"container mx-auto px-4 pt-5 pb-4 align-center sm:p-6 sm:pb-4\">\n                                <div className=\"justify-center items-center sm:flex sm:items-start\">\n                                    <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                                        <h3 className=\"container mx-auto text-lg leading-6 font-bold text-gray-900\" id=\"modal-headline\">\n                                            Enter Friend's Email\n                                        </h3>\n                                        <div className=\"mt-2\">\n                                            <input id=\"searchBar\" className=\"container mx-auto my-2 border-2 \"></input>\n\n                                            {errorMessage && (\n                                                <div>\n                                                    <p className=\"text-red text-center\">{errorMessage}</p>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <button onClick={handleNewFriend} className=\"container mx-auto shadow-sm mt-1 block sm:text-sm border-2  rounded-md bg-blue hover:bg-purple-dark hover:text-gray-lightest hover:border-gray-lightest\"> Add Friend </button>\n                                        <button onClick={toggleNewFriend} className=\"container mx-auto shadow-sm mt-1 block sm:text-sm border-2  rounded-md bg-gray-light hover:bg-gray-lightest\">Close</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            :\n            <div className='w-11/12 items-center mx-auto'>\n                <h3 className=\"container mx-auto text-lg leading-6 font-bold text-center\" id=\"modal-headline\">\n                    Enter Friend's Email\n                </h3>\n                <div className=\"mt-2\">\n                    <input id=\"searchBar\" className=\"container mx-auto my-2 border-2 \"></input>\n\n                    {errorMessage && (\n                        <div>\n                            <p className=\"text-red text-center\">{errorMessage}</p>\n                        </div>\n                    )}\n                </div>\n                <button onClick={handleNewFriend} className=\"bg-purple container mx-auto shadow-sm mt-1 block sm:text-sm border-2 font-bold  hover:bg-blue rounded-md\"> Add Friend </button>\n                <button onClick={toggleNewFriend} className=\"bg-purple container mx-auto shadow-sm mt-1 block sm:text-sm font-bold  border-2 hover:bg-blue rounded-md\">Close</button>\n                <div className='pt-4 border-b-4'></div>\n            </div>\n        }\n        </div>\n        \n    )\n}\n\nexport default AddFriend","import decode from 'jwt-decode';\n\nclass Auth {\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    loggedIn() {\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else return false;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    getToken() {\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken) {\n        localStorage.setItem('id_token', idToken);\n\n        window.location.assign('/dashboard');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.assign('/login');\n    }\n}\n\nexport default new Auth();","import { gql } from '@apollo/client';\n\nexport const MESSAGE_SUBSCRIPTION = gql`\n    subscription messageAdded($channelId: ID) {\n        messageAdded(channelId: $channelId) {  \t\n            _id\n            messages {\n                _id\n                messageText\n            }\n        }\n    }\n`;\n\nexport const CHANNEL_SUBSCRIPTION = gql `\n    subscription channelAdded($userId: ID) {\n        channelAdded(userId: $userId) {\n            _id\n            channels {\n                _id\n            }\n        }\n    }\n`;","import React from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { DELETE_CHANNEL } from '../../utils/mutations';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction DeleteChat() {\n    const [state, dispatch] = useStoreContext();\n    const [deleteChannel] = useMutation(DELETE_CHANNEL);\n\n    const { currentChat } = state;\n\n    const handleDeleteChannel = async event => {\n        event.preventDefault();\n\n        const removeChannel = channelToRemove => {\n            state.channels.forEach((channel) => {\n                if(channel._id === currentChat) {\n                    idbPromise('channels', 'delete', { ...channel });\n                }\n            })\n        };\n        try {\n            removeChannel(currentChat)\n            await deleteChannel({\n                variables: {\n                    channelId: currentChat\n                }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n\n        window.location.reload();\n\n    };\n\n    \n    if(state.currentChat === '') {\n        return (\n            <div></div>\n        )\n    }\n\n\n\n    return (\n        <div className=\"\">\n            <button onClick={handleDeleteChannel} className=\"w-10/12 mx-auto my-3 flex items-center justify-center px-8 border border-transparent text-base font-medium rounded-md bg-blue hover:bg-purple md:py-4 md:text-lg md:px-10\">\n                - Delete Conversation\n            </button>\n        </div>\n    )\n};\n\nexport default DeleteChat","import React, { useEffect } from 'react';\nimport { useQuery, useSubscription } from '@apollo/client';\nimport { QUERY_USER } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport AddChat from '../AddChat';\nimport AddFriend from '../SearchFriend';\nimport { UPDATE_CHANNEL, GET_USER, TOGGLE_CHAT } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport Auth from '../../utils/auth'\nimport { CHANNEL_SUBSCRIPTION } from '../../utils/subscriptions';\nimport DeleteChat from '../DeleteChat';\n\n\nfunction Sidebar() {\n    const [state, dispatch] = useStoreContext();\n\n    const { currentChat } = state;\n\n    const { loading, data: queryData } = useQuery(QUERY_USER);\n\n    const userData = Auth.getProfile();\n\n    const { data } = useSubscription(CHANNEL_SUBSCRIPTION, {\n        variables: {\n            userId: userData.data._id\n        }\n    })\n\n    useEffect(() => {\n        if (queryData) {\n            dispatch({\n                type: UPDATE_CHANNEL,\n                channels: queryData.user.channels\n            });\n            queryData.user.channels.forEach((channel) => {\n                idbPromise('channels', 'put', channel);\n            });\n            dispatch({\n                type: GET_USER,\n                firstName: queryData.user.firstName,\n                lastName: queryData.user.lastName\n            });\n        } else if (!loading) {\n            idbPromise('channels', 'get').then((channels) => {\n                dispatch({\n                    type: UPDATE_CHANNEL,\n                    channels: channels\n                });\n            });\n        }\n    }, [queryData, loading, dispatch]);\n\n    // subscription useEffect\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: UPDATE_CHANNEL,\n                channels: data.channelAdded.channels\n            });\n        }\n    }, [data, dispatch]);\n\n\n    function selectChat(id) {\n        dispatch({ type: TOGGLE_CHAT, currentChat: id });\n        return id;\n    }\n\n    return (\n        <div className=\"bg-gray relative\">\n            <div className=\"border-b-4 \">\n                <h2 className=\"mt-6 text-center text-3xl font-extrabold\">Conversations</h2>\n            </div>\n            <AddChat />\n            <AddFriend />\n            <DeleteChat />\n            <div className=\"grid mx-auto justify-center grid-flow-row\">\n                {state.channels.map(channel => (\n                    <div key={channel._id}>\n                        {currentChat === channel._id ?\n                            (\n                                <div onClick={() => { selectChat(channel._id) }} key={channel._id} className=\"bg-purple cursor-pointer flex border border-transparent hover:border-gray-lightest hover:bg-purple-dark rounded-md my-1\">\n                                    <p className=\"text-lg font-bold hover:text-gray-lightest\" >{channel.name}</p>\n                                </div>\n                            ) : (\n                                <div onClick={() => { selectChat(channel._id) }} key={channel._id} className=\"flex border cursor-pointer  border-transparent hover:border-gray-lightest hover:bg-purple-dark rounded-md my-1\">\n                                    <p className=\"text-lg font-bold hover:text-gray-lightest\" >{channel.name}</p>\n                                </div>\n                            )}\n                    </div>\n                ))}\n            </div>\n            <div>\n            </div>\n            <div className=\"fixed container bottom-0 w-full border-t-4  bg-gray p-4 grid grid-cols-2\">\n                <div className=\"col-auto\">\n                    <div className=\"flex\">\n                        <h1 className=\"font-sans text-3xl\">word</h1>\n                        <h1 className=\"font-sans text-3xl text-purple justify-right text-right\">U</h1>\n                        <h1 className=\"font-sans text-3xl justify-right text-right\">p</h1>\n                    </div>\n                    <p className=\"text-lg font-bold\">{state.firstName} {state.lastName}</p>\n                    <a href=\"/\" onClick={() => Auth.logout()} className=\"text-lg font-bold rounded-md border border-transparent hover:border-gray-lightest hover:bg-purple\">Logout</a>\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar;","import React, { useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState'\nimport { TOGGLE_FRIENDS, GET_FRIENDS } from '../../utils/actions';\nimport { ADD_PARTICIPANT } from '../../utils/mutations';\nimport { QUERY_USER } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers'\n\nfunction AddParticipant() {\n    const [state, dispatch] = useStoreContext();\n    const [addParticipant] = useMutation(ADD_PARTICIPANT)\n    const { loading, data } = useQuery(QUERY_USER)\n\n    let tempFriendArray = []\n\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: GET_FRIENDS,\n                friends: data.user.friends\n            });\n            data.user.friends.forEach((friend) => {\n                idbPromise('friends', 'put', friend);\n            })\n        } else if (!loading) {\n            idbPromise('friends', 'get').then((friends) => {\n                dispatch({\n                    type: GET_FRIENDS,\n                    friends: friends\n                });\n            });\n        }\n    }, [data, loading, dispatch]);\n\n    const handleAddSubmit = async event => {\n        event.preventDefault();\n        \n        try {\n            for(let i = 0; i < tempFriendArray.length; i++) {\n                addParticipant({\n                    variables: {\n                        channelId: state.currentChat,\n                        participants: tempFriendArray[i]\n                    }\n                });\n                \n            }\n        } catch (e) {\n            console.error(e)\n        }\n        toggleFriendsList()\n        window.location.reload();\n    }\n\n    function clickHandler(friend) {\n        let tempHighlight = document.getElementById(friend)\n        tempHighlight.classList.add(\"bg-purple-dark\")\n        tempHighlight.classList.add(\"text-gray-lightest\")\n        tempHighlight.classList.add(\"border-transparent\")\n        tempHighlight.classList.add(\"border-gray-lightest\")\n        \n        tempFriendArray.push(friend)\n    }\n\n    function toggleFriendsList() {\n        dispatch({ type: TOGGLE_FRIENDS });\n    }\n\n    if(!state.friendsListOpen) {\n        return (\n            <button onClick={toggleFriendsList} className=\"rounded-lg bg-purple  border-2 sm:text-xl text-small font-bold hover:bg-purple-dark hover:text-gray-lightest sm:p-2 px-2 sm:h-auto h-8\">\n                +Member\n            </button>\n        )\n    }\n\n    return (\n        <div className=\"fixed z-10 inset-0 overflow-y-auto\">\n            <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n\n                <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n                    <div className=\"absolute inset-0 opacity-75\"></div>\n                </div>\n\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n                <div className=\"inline-block align-bottom bg-purple rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\n                    <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                        <div className=\"grid grid-col-4\">\n                            <div className=\"grid col-span-1 sm:flex sm:items-start\">\n                                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                                    <h3 className=\"text-lg leading-6 font-medium\" id=\"modal-headline\">\n                                        Friends List\n                                    </h3>\n                                    <ul className=\"mt-2\">\n                                        {state.friends.map(friend => (\n                                            <p onClick={() => { clickHandler(friend._id) }} key={friend._id} id={friend._id} className=\"text-sm hover:bg-purple-dark cursor-pointer border hover:text-gray-lightest border-transparent hover:border-gray-lightest rounded-md\">{friend.firstName} {friend.lastName}</p>\n                                        ))}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                        <button onClick={handleAddSubmit} type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-gray-darkest shadow-sm px-4 py-2 bg-blue text-base font-medium sm:ml-3 sm:w-auto sm:text-sm  hover:bg-purple-dark border hover:text-gray-lightest border-transparent hover:border-gray-lightest\">\n                            Add\n                        </button>\n                        <button type=\"button\" onClick={toggleFriendsList} className=\"mt-3 w-full inline-flex justify-center rounded-md border shadow-sm px-4 py-2 bg-gray-light text-base font-medium sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm hover:bg-gray-lightest\">\n                            Cancel\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddParticipant;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState'\nimport { TOGGLE_PARTICIPANTS, GET_PARTICIPANTS } from '../../utils/actions';\nimport { QUERY_CHANNEL } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers'\n\nfunction ChatParticipants() {\n    const [state, dispatch] = useStoreContext();\n    const { loading, data } = useQuery(QUERY_CHANNEL, {\n        variables: {\n            channelId: state.currentChat\n        }\n    });\n\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: GET_PARTICIPANTS,\n                participants: data.channel.participants\n            });\n            data.channel.participants.forEach((participant) => {\n                idbPromise('participants', 'put', participant);\n            })\n        } else if (!loading) {\n            idbPromise('participants', 'get').then((participants) => {\n                dispatch({\n                    type: GET_PARTICIPANTS,\n                    participants: participants\n                });\n            });\n        }\n    }, [data, loading, dispatch]);\n\n\n    function toggleParticipantsList() {\n        dispatch({ type: TOGGLE_PARTICIPANTS });\n    }\n\n    if(state.currentChat === '') {\n        return(\n            <div></div>\n        )\n    }\n\n    if(!state.participantsListOpen ) {\n        return (\n            <button onClick={toggleParticipantsList} className=\"rounded-lg bg-purple  border-2 w-auto sm:text-xl text-small font-bold hover:bg-purple-dark hover:text-gray-lightest sm:p-2 px-2 sm:h-auto h-8\">\n            Members\n            </button>\n        )\n    }\n\n\n\n    return(\n        <div className=\"fixed z-10 inset-0 overflow-y-auto\">\n            <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n\n                <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n                    <div className=\"absolute inset-0 opacity-75\"></div>\n                </div>\n\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n                <div className=\"inline-block align-bottom bg-purple rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\n                    <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                        <div className=\"sm:flex sm:items-start\">\n                            <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                                <h3 className=\"text-lg leading-6 font-medium\" id=\"modal-headline\">\n                                    Members in Chat\n                                </h3>\n                                <div className=\"mt-2\">\n                                    {state.participants.map(participant => (\n                                        <p key={participant._id} className=\"text-sm rounded-md cursor-default\">{participant.firstName} {participant.lastName}</p>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                        <button type=\"button\" onClick={toggleParticipantsList} className=\"mt-3 w-full inline-flex justify-center rounded-md border shadow-sm px-4 py-2 text-base bg-gray-light font-medium sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm hover:bg-gray-lightest\">\n                            Cancel\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatParticipants;","import React, { useEffect, useState, useRef } from 'react';\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { ADD_MESSAGE } from '../../utils/mutations';\nimport { QUERY_CHANNEL } from '../../utils/queries';\nimport { MESSAGE_SUBSCRIPTION } from '../../utils/subscriptions';\nimport AddParticipant from '../AddParticipant';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_MESSAGES } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport Auth from '../../utils/auth';\nimport ChatParticipants from '../ChatParticipants';\n\nfunction Conversation() {\n    const [state, dispatch] = useStoreContext();\n    const [messageField, setMessage] = useState('');\n    const { currentChat } = state;\n    const { data } = useSubscription(MESSAGE_SUBSCRIPTION, {\n        variables: {\n            channelId: currentChat\n        }\n    });\n\n    const { loading, data: queryData } = useQuery(QUERY_CHANNEL, {\n        variables: {\n            channelId: currentChat\n        }\n    });\n\n    const [addMessage] = useMutation(ADD_MESSAGE);\n    const [convoState, setConvoState] = useState()\n\n    let width = window.innerWidth;\n    let mobileWidth = width <= 845;\n\n    const messagesEndRef = useRef(null);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    };\n\n\n    // query useEffect\n    useEffect(() => {\n        if (queryData) {\n            dispatch({\n                type: UPDATE_MESSAGES,\n                messages: queryData.channel.messages\n            });\n            queryData.channel.messages.forEach((message) => {\n                idbPromise('messages', 'put', message)\n            });\n        }\n        else if (!loading) {\n            idbPromise('messages', 'get').then((messages) => {\n                dispatch({\n                    type: UPDATE_MESSAGES,\n                    messages: messages\n                })\n            })\n        }\n    }, [queryData, loading, dispatch]);\n\n    // subscription useEffect\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: UPDATE_MESSAGES,\n                messages: data.messageAdded.messages\n            });\n        }\n    }, [data, dispatch]);\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [state.messages]);\n\n    const userData = Auth.getProfile();\n\n    const handleMessageSubmit = async event => {\n        event.preventDefault();\n        try {\n            await addMessage({\n                variables: {\n                    createdBy: convoState.createdBy,\n                    messageText: convoState.messageText,\n                    channelId: currentChat\n                }\n            });\n            setMessage('');\n\n        } catch (e) {\n            console.error(e);\n        }\n    };\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setConvoState({\n            ...convoState,\n            [name]: value\n        });\n        setMessage(event.target.value);\n    };\n\n    if (state.currentChat === '') {\n        return (\n            <div className=\"overflow-hidden bg-gray-dark h-screen\">\n                <div className='overflow-scroll h-screen overflow-x-hidden'>\n                    <div className='h-1/6' ref={messagesEndRef} />\n                </div>\n                <div className='bg-gray-darkest overflow-hidden'>\n                    <div className=\"m-2 flex fixed bottom-0 w-8/12\">\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"overflow-hidden bg-gray-dark h-screen\">\n            <div className='overflow-scroll h-screen overflow-x-hidden'>\n                <div className='h-14' ref={messagesEndRef} />\n                {(state.messages.map(message => (\n                    <div key={message._id} className=\"grid\">\n                        {userData.data.email === message.email ? (\n                            <div className=\"grid flex flex-wrap justify-items-end\">\n                                <p className=\"max-w-sm md:max-w-4xl flex flex-wrap m-2 p-2 text-xl font-semibold rounded-2xl bg-blue justify-items-end object-right break-all\">\n                                    {message.messageText}\n                                </p>\n                            </div>\n                        ) : (\n                                <div className=\"grid flex flex-wrap justify-items-start\">\n                                    <p className=\"mb-0 max-w-sm md:max-w-4xl flex flex-wrap m-2 p-2 text-xl font-semibold rounded-2xl bg-gray-light object-left break-all\">\n                                        {message.messageText}\n                                    </p>\n                                    <p className='pl-4 text-sm text-gray-lightest'>{message.sender}</p>\n                                </div>\n                            )}\n                    </div>\n                ))\n                )}\n                <div className='h-24' ref={messagesEndRef} />\n            </div>\n            <div className='bg-gray-darkest overflow-hidden'>\n                {!mobileWidth ?\n                    <div className=\"m-2 flex fixed bottom-0 h-12 w-8/12\">\n                        <input name=\"messageText\" value={messageField} onChange={handleChange} className=\"shadow-sm border-2  mt-1 block w-full sm:text-sm rounded-md\" />\n                        <button type=\"submit\" onClick={handleMessageSubmit} className=\"rounded-lg bg-purple  border-2 w-auto sm:text-xl text-small font-bold hover:bg-purple-dark hover:text-gray-lightest p-2 sm:h-auto h-8\">\n                            Send\n                        </button>\n                        <div>\n                            <AddParticipant />\n                        </div>\n                        <div>\n                            <ChatParticipants />\n                        </div>\n                    </div>\n                :\n                    <div className=\"m-2 flex flex-wrap fixed bottom-0 w-11/12\">\n                        <div className=\"w-full flex\">\n                            <input name=\"messageText\" value={messageField} onChange={handleChange} className=\"shadow-sm border-2  mt-1 block w-full sm:text-sm rounded-md sm:h-auto\" />\n                            <button type=\"submit\" onClick={handleMessageSubmit} className=\"rounded-lg bg-purple border-2 w-auto sm:text-xl text-small font-bold hover:bg-purple-dark hover:text-gray-lightest sm:h-auto h-8 items-center sm:p-2 px-2\">\n                                Send\n                            </button>\n                        </div>\n                        <div className=\"flex w-full items-center\">\n\n                                <AddParticipant />\n\n                                <ChatParticipants />\n\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\nexport default Conversation;","import React, { useState, createRef, useEffect } from \"react\";\nimport Popper from \"popper.js\";\nimport AddChat from \"../AddChat\";\nimport DeleteChat from \"../DeleteChat\";\nimport AddFriend from \"../SearchFriend\";\nimport { useQuery, useSubscription } from '@apollo/client';\nimport { QUERY_USER } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_CHANNEL, GET_USER, TOGGLE_CHAT } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport Auth from '../../utils/auth'\nimport { CHANNEL_SUBSCRIPTION } from '../../utils/subscriptions';\n\n\n\n\nfunction Menu() {\n\n    //Data pulled for populating add side bar data\n\n    const [state, dispatch] = useStoreContext();\n\n    const {currentChat} = state;\n\n    const { loading, data: queryData } = useQuery(QUERY_USER);\n\n    const userData = Auth.getProfile();\n\n    const { data } = useSubscription(CHANNEL_SUBSCRIPTION, {\n        variables: {\n            userId: userData.data._id\n        }\n    })\n\n    useEffect(() => {\n        if (queryData) {\n            dispatch({\n                type: UPDATE_CHANNEL,\n                channels: queryData.user.channels\n            });\n            queryData.user.channels.forEach((channel) => {\n                idbPromise('channels', 'put', channel);\n            });\n            dispatch({\n                type: GET_USER,\n                firstName: queryData.user.firstName,\n                lastName: queryData.user.lastName\n            });\n        } else if (!loading) {\n            idbPromise('channels', 'get').then((channels) => {\n                dispatch({\n                    type: UPDATE_CHANNEL,\n                    channels: channels\n                });\n            });\n        }\n    }, [queryData, loading, dispatch]);\n\n    // subscription useEffect\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: UPDATE_CHANNEL,\n                channels: data.channelAdded.channels\n            });\n            data.channelAdded.channels.forEach((channel) => {\n                idbPromise('channels', 'put', channel)\n            });\n        }\n    }, [data, dispatch]);\n\n\n    function selectChat(id) {\n        dispatch({ type: TOGGLE_CHAT, currentChat: id });\n        return id;\n    }\n\n\n  // dropdown props for the dropdown menu\n  const [dropdownPopoverShow, setDropdownPopoverShow] = useState(false);\n  const btnDropdownRef = createRef();\n  const popoverDropdownRef = createRef();\n  const openDropdownPopover = () => {\n    new Popper(btnDropdownRef.current, popoverDropdownRef.current, {\n      placement: \"bottom-start\"\n    });\n    setDropdownPopoverShow(true);\n  };\n\n  const closeDropdownPopover = () => {\n    setDropdownPopoverShow(false);\n  };\n\n  return (\n    <>\n      <div className=\"col-span-3 col-start-1 col-end-5 fixed bg-gray-light w-screen grid-cols-4\">\n      <div className=\"flex absolute top-0 right-0 mr-4 mt-1\">\n                        <h1 className=\"font-sans text-3xl\">word</h1>\n                        <h1 className=\"font-sans text-3xl text-purple justify-right text-right\">U</h1>\n                        <h1 className=\"font-sans text-3xl justify-right text-right\">p</h1>\n                    </div>\n        <div className=\"col-start-3 w-full sm:w-9/12 md:w-4/12 px-4\">\n          <div className=\"\">\n            <button className={\"font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none mr-1 mb-1 col-start-3 col-end-4 col-span-1\"}\n              style={{ transition: \"all .15s ease\" }}\n              type=\"button\"\n              ref={btnDropdownRef}\n              onClick={() => {\n                dropdownPopoverShow\n                  ? closeDropdownPopover()\n                  : openDropdownPopover();\n              }}\n            >\n              Menu\n            </button>\n            {/* Drop down menu start */}\n            <div\n              ref={popoverDropdownRef}\n              className={(dropdownPopoverShow ? \"block \" : \"hidden \") + \"bg-gray-light text-base z-50 float-left py-2 list-none text-left rounded shadow-lg mt-1 min-w-max pb-0\"\n              }\n              style={{ minWidth: \"18rem\" }}\n            >\n\n                {/* Beginning of all the data to populate the sections */}\n                <AddChat />\n                <AddFriend />\n                <DeleteChat />\n\n                <div className=\"grid mx-auto justify-center grid-flow-row\">\n                {state.channels.map(channel => (\n                <div key={channel._id}>\n                    {currentChat === channel._id ?\n                    (\n                        <div onClick={() => {selectChat(channel._id)}} key={channel._id} className=\"bg-purple cursor-pointer flex border border-transparent hover:border-gray-lightest hover:bg-purple-dark rounded-md my-1\">\n                            <p className=\"text-md font-bold text-gray-darkest\" >{channel.name}</p>\n                        </div>\n                    ) : (\n                        <div onClick={() => {selectChat(channel._id)}} key={channel._id} className=\"flex border cursor-pointer  border-transparent hover:border-gray-lightest hover:bg-purple-dark rounded-md my-1\">\n                            <p className=\"text-md font-bold text-gray-darkest\" >{channel.name}</p>\n                        </div>\n                    )}\n                </div>\n            ))}\n            </div>\n            <div>\n            </div>\n            <div className=\"w-full border-t-4 bg-gray p-4 grid grid-cols-2\">\n                <div className=\"col-auto\">\n\n                    <p className=\"pl-8 text-lg font-bold\">{state.firstName} {state.lastName}</p>\n                    <a href=\"/\" onClick={() => Auth.logout()} className=\"pl-8 text-lg font-bold rounded-md border border-transparent hover:border-gray-lightest hover:bg-purple\">Logout</a>\n                </div>\n            </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Menu;","import react, { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n    const [windowSize, setWindowSize] = useState({\n        width: undefined\n    });\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowSize({\n                width: window.innerWidth\n            });\n        }\n\n        window.addEventListener('resize', handleResize);\n\n        handleResize();\n\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowSize;\n}\n\nexport default useWindowSize;","import React from 'react';\nimport Sidebar from '../Components/Sidebar'\nimport Conversation from '../Components/Conversation'\nimport Menu from '../Components/Menu';\nimport useWindowSize from '../utils/useWindowSize';\n\n\nconst Dashboard = () => {\n\n    const size = useWindowSize();\n    let mobileWidth = size.width <= 845;\n\n    return (\n        <div>\n        {mobileWidth ?\n                <div className=\"grid grid-cols-4 grid-flow-row\">\n                    <div className=\"col-span-3 col-start-1 col-end-5\">\n                        <Menu />\n                    </div>\n                    <div className=\"col-span-3 col-start-1 col-end-5 h-screen\">\n                        <Conversation />\n                    </div>\n                </div>\n            :\n                <div className=\"grid grid-cols-4 grid-flow-row\">\n                    <div className=\"col-span-2 col-start-1 col-end-4 h-screen\">\n                        <Conversation />\n                    </div>\n                    <div className=\"col-span-1 col-start-4 col-end-5 border-l-2  h-screen bg-gray\">\n                        <Sidebar />\n                    </div>\n                </div>\n            }\n        </div>\n    )\n};\n\nexport default Dashboard;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login() {\n    const [formState, setFormState] = useState({ email: '', password: ''})\n    const [login, { error }] = useMutation(LOGIN);\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n        try{\n            const loginResponse = await login({ variables: { email: formState.email, password: formState.password } })\n            const token = loginResponse.data.login.token;        \n            Auth.login(token);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    return (\n        <div className=\"min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray\">\n            <div className=\"absolute inset-y-0 right-0 p-14\">\n                <h1 className=\"font-sans text-5xl mx-auto mr-5\">word</h1>\n                <h1 className=\"font-sans text-5xl text-purple justify-right text-right\">U</h1>\n                <h1 className=\"font-sans text-5xl justify-right text-right\">p</h1>\n            </div>\n            <form onSubmit= {handleFormSubmit} className=\"m-auto my-60 max-w-md w-full space-y-5 max-h-full bg-purple rounded-3xl\">\n                <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n                    LOGIN\n                </h2>\n                <div>\n                    <div>\n                        <input placeholder=\"Email\"\n                            name=\"email\"\n                            type=\"email\"\n                            onChange={handleChange}\n                            className=\"mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray-300\" />\n                    </div>\n                    <div>\n                        <input placeholder=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            onChange={handleChange} \n                            className=\"mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray-300\"/>\n                    </div>\n                    { error ? <div>\n                        <p className=\"text-red text-center\"> The provided credentials are incorrect</p>\n                    </div> : null\n                    }\n                    <button type=\"submit\" className=\"w-10/12 mx-auto flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md bg-purple-dark hover:bg-gray-lightest md:py-4 md:text-lg md:px-10\">Login</button>\n                </div>\n                <p className=\"mx-auto text-center\">Don't have an account yet?\n                    <Link to=\"/signup\" className='bg-gray-lightest rounded hover:bg-purple-dark hover:text-gray-lightest'> Click here to sign up!</Link>\n                </p>\n            </form>\n        </div>\n\n    );\n\n}\n\nexport default Login;","import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n    const [formState, setFormState] = useState({ email: '', password: '', rePassword: '' });\n    const [errorMessage, setErrorMessage] = useState('');\n    const { email, password, rePassword } = formState\n    const [addUser] = useMutation(ADD_USER);\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        if (formState.firstName && formState.lastName && formState.email && formState.password && formState.rePassword) {\n            if (validateEmail(formState.email)) {\n                if (formState.password === formState.rePassword) {\n                    if (formState.password.length > 4) {\n                        const mutationResponse = await addUser({\n                            variables: {\n                                email: formState.email, password: formState.password,\n                                firstName: formState.firstName, lastName: formState.lastName\n                            }\n                        });\n                        const token = mutationResponse.data.addUser.token;\n                        Auth.login(token);\n                        console.log(\"You are now signed up for wordUp!\");\n                    } else {\n                        setErrorMessage(\"Your password needs to be at least 5 characters\");\n                    }\n                } else {\n                    setErrorMessage(\"Your passwords do not match\");\n                }\n            } else {\n                setErrorMessage(\"You need to enter a valid email\");\n            }\n        } else {\n            setErrorMessage(\"You need to fill out all forms\");\n        }\n    };\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n\n        if (event.target.name === \"firstName\") {\n            if (event.target.value) {\n                console.log(\"first name entered\");\n            } else {\n                console.log('enter a first name');\n            }\n        }\n\n        if (event.target.name === \"lastName\") {\n            if (event.target.value) {\n                console.log(\"last name entered\");\n            } else {\n                console.log('enter a last name');\n            }\n        }\n\n        if (event.target.name === \"email\") {\n            const correctEmail = validateEmail(event.target.value);\n            if (correctEmail) {\n                console.log(\"email is valid\");\n            } else {\n                console.log('enter valid email');\n            }\n        }\n\n        if (event.target.name === \"password\") {\n            if (event.target.value.length > 4) {\n                console.log(\"password is valid\");\n            } else {\n                console.log('enter a password greater than 5 characters');\n            }\n        }\n\n        if (event.target.name === \"rePassword\") {\n            if (event.target.value === formState.password) {\n                console.log(\"passwords match\");\n            } else {\n                console.log(\"passwords do not match\")\n            }\n        }\n\n    };\n\n    const validateEmail = (email) => {\n        let pattern = new RegExp(/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/);\n        return pattern.test(String(email).toLowerCase());\n    }\n\n    return(\n        <div className=\"min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 justify-center bg-gray\">\n            <div className=\"absolute inset-y-0 right-0 p-14\">\n                <h1 className=\"font-sans text-5xl mx-auto mr-5\">word</h1>\n                <h1 className=\"font-sans text-5xl text-purple justify-right text-right\">U</h1>\n                <h1 className=\"font-sans text-5xl justify-right text-right\">p</h1>\n            </div>\n            <form onSubmit={handleFormSubmit} className=\"m-auto my-60 max-w-md w-full space-y-5 max-h-full bg-purple rounded-3xl\">\n                <h2 className=\"mt-6 text-center text-3xl font-extrabold\">\n                    SIGN UP\n                </h2>\n                <div className=\"\">\n                    <div>\n                        <input type=\"text\" \n                         name=\"firstName\" placeholder=\"First Name\"\n                         onBlur={handleChange}\n                         className=\"border-2 mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray\" />\n                    </div>\n                    <div>\n                        <input type=\"text\"\n                        name=\"lastName\" placeholder=\"Last Name\" \n                        onBlur={handleChange}\n                        className=\"border-2 mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray\" />\n                    </div>\n                    <div>\n                        <input type=\"email\" \n                        name=\"email\" placeholder=\"Email\" \n                        onBlur={handleChange} \n                        className=\"border-2 mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray\" />\n                    </div>\n                    <div>\n                        <input type=\"password\"\n                        name=\"password\" placeholder=\"Password\" \n                        onBlur={handleChange} \n                        className=\"border-2 mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray\" />\n                    </div>\n                    <div>\n                        <input type=\"password\" \n                        name=\"rePassword\" placeholder=\"Confirm Password\" \n                        onChange={handleChange} \n                        className=\"border-2 mx-auto mb-1.5 flex-1 block w-5/6 rounded sm:text-sm border-gray\" />\n                    </div>\n                    <button type=\"submit\" className=\"w-10/12 mx-auto flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md bg-purple-dark hover:bg-gray-lightest md:py-4 md:text-lg md:px-10\">Sign Up!</button>\n                    {errorMessage && (\n                        <div>\n                            <p className=\"text-red text-center\">{errorMessage}</p>\n                        </div>\n                    )}                    \n                </div>\n                <p className=\"mx-auto text-center\">Already have an account? \n                    <Link to=\"/\" className='bg-gray-lightest rounded hover:bg-purple-dark hover:text-gray-lightest'> Click here to login!</Link>\n                </p>\n            </form>\n\n        </div>\n    )\n}\n\nexport default Signup;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport Dashboard from './pages/Dashboard';\nimport Login from './pages/Login';\nimport Signup from \"./pages/Signup\";\nimport { ChannelProvider } from \"./utils/GlobalState\";\n\nconst httpLink = new HttpLink({\n  uri: '/graphql',\n  headers: {\n    authorization: localStorage.getItem('id_token')\n  }\n});\n\n// const deployedSite = 'ws://fast-shelf-56121.herokuapp.com/graphql'\n// const HOST = location.origin.replace(/^http/, 'ws')\n\nconst wsLink = new WebSocketLink({\n  uri: 'wss://fast-shelf-56121.herokuapp.com/graphql',\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authorization: `Bearer ${localStorage.getItem('id_token')}`\n    }\n  },\n});\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    User: {\n      fields: {\n        channels: {\n          merge(existing, incoming){\n            return incoming\n          }\n        },\n      },\n    },\n  },\n});\n\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' && operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache,\n  headers: {\n    authorization: localStorage.getItem('id_token')\n  },\n  link\n})\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <ChannelProvider>\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n          </Switch>\n        </ChannelProvider>\n      </Router>\n    </ApolloProvider>\n  );\n}\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n  \nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}